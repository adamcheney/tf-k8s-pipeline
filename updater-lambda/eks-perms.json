{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "iam:AttachRolePolicy",
                "iam:CreateRole",
                "iam:CreateServiceLinkedRole",
                "iam:DeleteRole",
                "iam:DeleteRolePermissionsBoundary",
                "iam:DeleteRolePolicy",
                "iam:DeleteServiceLinkedRole",
                "iam:DetachRolePolicy",
                "iam:PassRole",
                "iam:PutRolePermissionsBoundary",
                "iam:PutRolePolicy",
                "iam:UpdateAssumeRolePolicy",
                "iam:UpdateRole",
                "iam:UpdateRoleDescription"
            ],
            "Resource": [
                "arn:aws:iam::*:role/AccountOwner",
                "arn:aws:iam::*:role/APIGWAdmin",
                "arn:aws:iam::*:role/Auditor",
                "arn:aws:iam::*:role/CloudabilityRole_OU",
                "arn:aws:iam::*:role/CloudTrailStackSet",
                "arn:aws:iam::*:role/NRMetricStream-CloudwatchServiceRole",
                "arn:aws:iam::*:role/NRMetricStream-ConfigServiceRole-*",
                "arn:aws:iam::*:role/DataScientist",
                "arn:aws:iam::*:role/Developer",
                "arn:aws:iam::*:role/NRMetricStream-FirehoseServiceRole",
                "arn:aws:iam::*:role/FullAdminAccess",
                "arn:aws:iam::*:role/IAMAdmin",
                "arn:aws:iam::*:role/kodemus_ami_scanner",
                "arn:aws:iam::*:role/kodemus_elasticache_scanner",
                "arn:aws:iam::*:role/MarketPlace",
                "arn:aws:iam::*:role/Marketplace",
                "arn:aws:iam::*:role/NetworkAdmin",
                "arn:aws:iam::*:role/NewRelicInfrastructure-Integrations",
                "arn:aws:iam::*:role/NRMetricStreamStackSetAdministrationRole",
                "arn:aws:iam::*:role/OIDCIngressAutomation",
                "arn:aws:iam::*:role/pacman-desk-access",
                "arn:aws:iam::*:role/pacman-kms-grant-access",
                "arn:aws:iam::*:role/PacManAccessKeys",
                "arn:aws:iam::*:role/PowerDeveloper",
                "arn:aws:iam::*:role/PowerUser",
                "arn:aws:iam::*:role/ReadOnly",
                "arn:aws:iam::*:role/RemoteConnectRDP",
                "arn:aws:iam::*:role/RemoteConnectShell",
                "arn:aws:iam::*:role/SecEngAccess",
                "arn:aws:iam::*:role/SecEngKMSGrant",
                "arn:aws:iam::*:role/SecEng-SSM-AutomationExecutionRole",
                "arn:aws:iam::*:role/SecEngReadR53HostedZones",
                "arn:aws:iam::*:role/SecEng-DeployTextRecords",
                "arn:aws:iam::*:role/SecEngStackSet",
                "arn:aws:iam::*:role/SecOpsEngineering",
                "arn:aws:iam::*:role/Zapdos-SecOpsIncidentResponder",
                "arn:aws:iam::*:role/kora-aurora-deployer",
                "arn:aws:iam::*:role/kora-aws-iam-roles-deployer",
                "arn:aws:iam::*:role/SIA-CredentialReport",
                "arn:aws:iam::*:role/ssm-tag-comp-*-assume",
                "arn:aws:iam::*:role/sumologic-metadata-tags",
                "arn:aws:iam::*:role/tag-comp-*-assume-*",
                "arn:aws:iam::*:role/SecEng-Tenable-StackSet-ExecRole",
                "arn:aws:iam::*:role/AdminAccess",
                "arn:aws:iam::*:role/IAMAdmin",
                "arn:aws:iam::*:role/ClusterAdmin",
                "arn:aws:iam::*:role/CortexIntegrationRole",
                "arn:aws:iam::*:role/CortexSandboxIntegrationRole",
                "arn:aws:iam::*:role/CortexPreprodIntegrationRole",
                "arn:aws:iam::*:role/KoraKMSDeployerRole",
                "arn:aws:iam::*:role/CrowdstrikeECRReadOnly"
            ],
            "Effect": "Deny",
            "Sid": "DenyRoles"
        },
        {
            "Action": [
                "iam:AttachRolePolicy",
                "iam:CreateRole",
                "iam:CreateServiceLinkedRole",
                "iam:DeleteRole",
                "iam:DeleteRolePermissionsBoundary",
                "iam:DeleteRolePolicy",
                "iam:DeleteServiceLinkedRole",
                "iam:DetachRolePolicy",
                "iam:PutRolePermissionsBoundary",
                "iam:PutRolePolicy",
                "iam:TagRole",
                "iam:UntagRole",
                "iam:UpdateAssumeRolePolicy",
                "iam:UpdateRole",
                "iam:UpdateRoleDescription"
            ],
            "Resource": [
                "arn:aws:iam::*:role/network_testing_api_internal_probe_role",
                "arn:aws:iam::*:role/NRMetricStreamStackSetExecutionRole",
                "arn:aws:iam::*:role/NRMetricStreamCICDRole",
                "arn:aws:iam::*:role/reliability-custodian-role-unmark-deletion-tag",
                "arn:aws:iam::*:role/SecAssetsKMSStackSet"
            ],
            "Effect": "Deny",
            "Sid": "DenyPassableRoles"
        },
        {
            "Action": [
                "iam:CreatePolicy",
                "iam:CreatePolicyVersion",
                "iam:DeletePolicy",
                "iam:DeletePolicyVersion",
                "iam:SetDefaultPolicyVersion"
            ],
            "Resource": [
                "arn:aws:iam::*:policy/Administrator-MFA",
                "arn:aws:iam::*:policy/Auditor",
                "arn:aws:iam::*:policy/CloudabilityMonitorResourcesPolicy",
                "arn:aws:iam::*:policy/CloudabilityVerificationPolicy",
                "arn:aws:iam::*:policy/DenyMarketplaceAccess",
                "arn:aws:iam::*:policy/DenyPowerDeveloper",
                "arn:aws:iam::*:policy/Edit-IAMRoles",
                "arn:aws:iam::*:policy/FullAdminAccess",
                "arn:aws:iam::*:policy/PacManAccessKeys",
                "arn:aws:iam::*:policy/PowerUser",
                "arn:aws:iam::*:policy/StackSet-*",
                "arn:aws:iam::*:policy/tenable-awsconnector-permissions-boundary",
                "arn:aws:iam::*:policy/tenable-scanner-permissions-boundary",
                "arn:aws:iam::*:policy/TrustedAdvisorFullAccess",
                "arn:aws:iam::*:policy/IAMAdminPolicy",
                "arn:aws:iam::*:policy/DeveloperPermissionsBoundary",
                "arn:aws:iam::*:policy/NetworkAdminPermissionsBoundary",
                "arn:aws:iam::*:policy/CortexIntegrationPolicy"
            ],
            "Effect": "Deny",
            "Sid": "DenyPolicies"
        }
    ]
}

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "acm:AddTagsToCertificate",
                "acm:DeleteCertificate",
                "acm:DescribeCertificate",
                "acm:ListCertificates",
                "acm:ListTagsForCertificate",
                "acm:RequestCertificate",
                "autoscaling:*LifecycleHook",
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:CreateAutoScalingGroup",
                "autoscaling:CreateOrUpdateTags",
                "autoscaling:DeleteAutoScalingGroup",
                "autoscaling:DeleteTags",
                "autoscaling:Describe*",
                "autoscaling:DetachInstances",
                "autoscaling:DisableMetricsCollection",
                "autoscaling:EnableMetricsCollection",
                "autoscaling:RecordLifecycleActionHeartbeat",
                "autoscaling:UpdateAutoScalingGroup",
                "cloudwatch:DeleteAlarms",
                "cloudwatch:Describe*",
                "cloudwatch:DisableAlarmActions",
                "cloudwatch:EnableAlarmActions",
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "cloudwatch:PutMetricAlarm",
                "cloudwatch:SetAlarmState",
                "cloudwatch:TagResource",
                "cloudwatch:UntagResource",
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:CopyImage",
                "ec2:CreateKeyPair",
                "ec2:CreateLaunchTemplate",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateNetworkInterface",
                "ec2:CreateSecurityGroup",
                "ec2:CreateTags",
                "ec2:CreateVolume",
                "ec2:DeleteKeyPair",
                "ec2:DeleteLaunchTemplate",
                "ec2:DeleteNetworkInterface",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteSnapshot",
                "ec2:DeleteTags",
                "ec2:DeleteVolume",
                "ec2:DeregisterImage",
                "ec2:Describe*",
                "ec2:ModifyImageAttribute",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress",
                "ec2:RunInstances",
                "ec2:TerminateInstances",
                "ecr:*",
                "eks:*",
                "elasticbeanstalk:DescribeEnvironments",
                "elasticfilesystem:*",
                "events:DeleteRule",
                "events:DescribeRule",
                "events:DisableRule",
                "events:EnableRule",
                "events:ListRules",
                "events:ListTagsForResource",
                "events:ListTargetsByRule",
                "events:PutRule",
                "events:PutTargets",
                "events:RemoveTargets",
                "events:TagResource",
                "events:UntagResource",
                "iam:*InstanceProfile",
                "iam:AttachRolePolicy",
                "iam:CreatePolicy",
                "iam:CreatePolicyVersion",
                "iam:CreateServiceLinkedRole",
                "iam:CreateRole",
                "iam:DeletePolicy",
                "iam:DeletePolicyVersion",
                "iam:DeleteRole",
                "iam:DeleteRolePolicy",
                "iam:DetachRolePolicy",
                "iam:GetAccount*",
                "iam:GetOpenIDConnectProvider",
                "iam:GetPolicy*",
                "iam:GetRole*",
                "iam:GetSAMLProvider",
                "iam:GetUser",
                "iam:List*",
                "iam:PassRole",
                "iam:PutRolePolicy",
                "iam:TagRole",
                "iam:UntagRole",
                "iam:UntagPolicy",
                "iam:TagPolicy",
                "iam:UpdateAssumeRolePolicy",
                "route53:ChangeResourceRecordSets",
                "route53:ChangeTagsForResource",
                "route53:CreateHostedZone",
                "route53:DeleteHostedZone",
                "route53:Get*",
                "route53:List*",
                "route53:TestDNSAnswer",
                "s3:CreateBucket",
                "s3:DeleteBucket",
                "s3:GetAccountPublicAccessBlock",
                "s3:GetBucket*",
                "s3:ListAllMyBuckets",
                "s3:ListBucket*",
                "s3:PutBucketPublicAccessBlock",
                "s3:PutBucketTagging",
                "s3:PutBucketVersioning",
                "sqs:*",
                "sns:*",
                "ssm:*Parameter*",
                "ssm:Describe*",
                "ssm:Get*",
                "ssm:List*",
                "sts:AssumeRole",
                "sts:GetCallerIdentity"
            ],
            "Resource": "*",
            "Effect": "Allow"
        },
        {
            "Action": [
                "s3:DeleteObject*",
                "s3:Get*",
                "s3:PutAccelerateConfiguration",
                "s3:PutBucketOwnershipControls",
                "s3:PutEncryptionConfiguration",
                "s3:PutObject*"
            ],
            "Resource": [
                "arn:aws:s3:::k8s-*",
                "arn:aws:s3:::k8s-*/*",
                "arn:aws:s3:::public-binaries",
                "arn:aws:s3:::public-binaries/*",
                "arn:aws:s3:::public-binaries-oregon",
                "arn:aws:s3:::public-binaries-oregon/*"
            ],
            "Effect": "Allow",
            "Sid": "AllowS3ObjectAccess"
        },
        {
            "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:ListAliases"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "AllowKMSKeyUsage"
        },
        {
            "Condition": {
                "Bool": {
                    "kms:GrantIsForAWSResource": "true"
                }
            },
            "Action": [
                "kms:CreateGrant",
                "kms:ListGrants",
                "kms:RetireGrant",
                "kms:RevokeGrant"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "AllowKMSKeyAttachmentFromAWS"
        },
        {
            "Condition": {
                "Bool": {
                    "kms:GrantIsForAWSResource": "false"
                }
            },
            "Action": [
                "kms:CreateGrant",
                "kms:ListGrants",
                "kms:RetireGrant",
                "kms:RevokeGrant"
            ],
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenyKMSKeyAttachmentFromUser"
        },
        {
            "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:DeleteHostedZone",
                "route53:UpdateHostedZoneComment"
            ],
            "Resource": [
                "arn:aws:route53:::hostedzone/Z2KD2ZXW0WJ1OL",
                "arn:aws:route53:::hostedzone/Z37PL8W355OBL8",
                "arn:aws:route53:::hostedzone/ZN2S2W3DRGU6C",
                "arn:aws:route53:::hostedzone/Z2MAQRE4V7G10I",
                "arn:aws:route53:::hostedzone/Z1L7X9WY39MDPJ"
            ],
            "Effect": "Deny",
            "Sid": "DenyUpdateAccessToTPZHostedZones"
        },
        {
            "Action": "eks:DeleteCluster",
            "Resource": [
                "arn:aws:eks:us-east-1:966283773129:cluster/us-east-1_k8s-platform-prod-rua_taupua_com",
                "arn:aws:eks:ap-southeast-2:046921848075:cluster/ap-southeast-2_k8s-platform-test-rua_taupua_com",
                "arn:aws:eks:us-west-2:192337955983:cluster/us-west-2_k8s-platform-uat-rua_taupua_com",
                "arn:aws:eks:us-east-1:640077214053:cluster/us-east-1_k8s-platform-svc-rua_taupua_com",
                "arn:aws:eks:us-west-2:640077214053:cluster/us-west-2_k8s-platform-svc-rua_taupua_com",
                "arn:aws:eks:ap-southeast-2:640077214053:cluster/ap-southeast-2_k8s-platform-svc-rua_taupua_com"
            ],
            "Effect": "Deny",
            "Sid": "DenyClusterDeleteOnCriticalClusters"
        },
        {
            "Action": [
                "iam:CreateOpenIDConnectProvider",
                "iam:DeleteOpenIDConnectProvider",
                "iam:UpdateOpenIDConnectProviderThumbprint"
            ],
            "Resource": [
                "arn:aws:iam::*:oidc-provider/oidc.eks.*.amazonaws.com",
                "arn:aws:iam::*:oidc-provider/oidc.eks.*.amazonaws.com/*"
            ],
            "Effect": "Allow",
            "Sid": "AllowEksOIDC"
        },
        {
            "Action": [
                "cloudformation:*"
            ],
            "Resource": [
                "arn:aws:cloudformation:*:*:stack/eksctl-*"
            ],
            "Effect": "Allow",
            "Sid": "AllowCloudFormation"
        }
    ]
}

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "aps:CreateAlertManagerDefinition",
                "aps:CreateRuleGroupsNamespace",
                "aps:CreateWorkspace",
                "aps:DeleteAlertManagerDefinition",
                "aps:DeleteRuleGroupsNamespace",
                "aps:DeleteWorkspace",
                "aps:DescribeAlertManagerDefinition",
                "aps:DescribeRuleGroupsNamespace",
                "aps:DescribeWorkspace",
                "aps:GetLabels",
                "aps:GetMetricMetadata",
                "aps:GetSeries",
                "aps:ListRuleGroupsNamespaces",
                "aps:ListWorkspaces",
                "aps:PutAlertManagerDefinition",
                "aps:PutRuleGroupsNamespace",
                "aps:QueryMetrics",
                "aps:UpdateWorkspaceAlias"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "AllowedAmazonManagedServiceforPrometheus"
        },
        {
            "Action": [
                "elasticloadbalancing:*"
            ],
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/platform-compute-*"
            ],
            "Effect": "Allow",
            "Sid": "AllowClassicLoadBalancerActions"
        },
        {
            "Action": [
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                "elasticloadbalancing:DescribeInstanceHealth",
                "elasticloadbalancing:DescribeLoadBalancerPolicies",
                "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
                "elasticloadbalancing:DescribeTags"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "AllowDescribeLoadBalancerAction"
        },
        {
            "Condition": {
                "StringEquals": {
                    "s3:authType": "REST-QUERY-STRING"
                },
                "NumericGreaterThan": {
                    "s3:signatureAge": "60000"
                }
            },
            "Action": [
                "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::*/*",
            "Effect": "Deny",
            "Sid": "LimitPresignedS3Urls"
        },
        {
            "Action": [
                "logs:CreateLogGroup",
                "logs:TagResource",
                "logs:DeleteLogGroup",
                "logs:DeleteMetricFilter",
                "logs:DeleteRetentionPolicy",
                "logs:DeleteSubscriptionFilter",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:DescribeMetricFilters",
                "logs:FilterLogEvents",
                "logs:GetLogEvents",
                "logs:GetLogGroupFields",
                "logs:ListTagsLogGroup",
                "logs:ListTagsForResource",
                "logs:PutRetentionPolicy",
                "logs:PutMetricFilter",
                "logs:PutSubscriptionFilter",
                "logs:TagLogGroup",
                "logs:TestMetricFilter",
                "logs:UntagLogGroup",
                "logs:UntagResource"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "AllowCloudWatchLog"
        },
        {
            "Action": [
                "lambda:AddPermission",
                "lambda:CreateAlias",
                "lambda:CreateCodeSigningConfig",
                "lambda:CreateEventSourceMapping",
                "lambda:CreateFunction",
                "lambda:DeleteAlias",
                "lambda:DeleteCodeSigningConfig",
                "lambda:DeleteEventSourceMapping",
                "lambda:DeleteFunction",
                "lambda:DeleteFunctionCodeSigningConfig",
                "lambda:DeleteFunctionConcurrency",
                "lambda:DeleteFunctionEventInvokeConfig",
                "lambda:DeleteLayerVersion",
                "lambda:DeleteProvisionedConcurrencyConfig",
                "lambda:GetAlias",
                "lambda:GetCodeSigningConfig",
                "lambda:GetFunction",
                "lambda:GetFunctionCodeSigningConfig",
                "lambda:GetFunctionEventInvokeConfig",
                "lambda:GetLayerVersion",
                "lambda:GetPolicy",
                "lambda:GetProvisionedConcurrencyConfig",
                "lambda:InvokeFunction",
                "lambda:ListAliases",
                "lambda:ListFunctions",
                "lambda:ListFunctionsByCodeSigningConfig",
                "lambda:ListLayers",
                "lambda:ListLayerVersions",
                "lambda:ListTags",
                "lambda:ListVersionsByFunction",
                "lambda:PublishLayerVersion",
                "lambda:PublishVersion",
                "lambda:PutFunctionCodeSigningConfig",
                "lambda:PutFunctionConcurrency",
                "lambda:PutFunctionEventInvokeConfig",
                "lambda:PutProvisionedConcurrencyConfig",
                "lambda:RemovePermission",
                "lambda:TagResource",
                "lambda:UntagResource",
                "lambda:UpdateAlias",
                "lambda:UpdateCodeSigningConfig",
                "lambda:UpdateEventSourceMapping",
                "lambda:UpdateFunctionCode",
                "lambda:UpdateFunctionConfiguration"
            ],
            "Resource": [
                "arn:aws:lambda:*:*:function:eks_node_updater*",
                "arn:aws:lambda:*:layer:lambda_layer_eks_node_updater*",
                "arn:aws:lambda:*:*:function:autobots*",
                "arn:aws:lambda:*:layer:lambda_layer_autobots*"
            ],
            "Effect": "Allow",
            "Sid": "AllowLambdaAccessForAtlantis"
        }
    ]
}